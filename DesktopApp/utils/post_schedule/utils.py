import pyperclip
import pyautogui
import subprocess
import time
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import re
import pygetwindow as gw
import time
def remove_non_bmp_characters(text):
    return ''.join(char for char in text if ord(char) <= 0xFFFF)
def focus_chrome_window(title_keywords=["Meta Business Suite", "Facebook", "Chrome"]):
    try:
        for keyword in title_keywords:
            windows = gw.getWindowsWithTitle(keyword)
            if windows:
                win = windows[0]
                win.activate()  # ƒê∆∞a c·ª≠a s·ªï ra foreground
                time.sleep(0.5)
                return True
    except Exception as e:
        print("‚ö†Ô∏è Kh√¥ng th·ªÉ focus v√†o c·ª≠a s·ªï Chrome:", e)
    return False

def find_add_image_button(driver):
    xpaths = [
        "//div[@role='button' and .//div[text()='Th√™m ·∫£nh/video']]",  # Giao di·ªán c≈©
        "//a[.//div[contains(text(), 'Th√™m ·∫£nh')]]",                   # Giao di·ªán th·∫ª <a>
        "//div[@aria-label='Ch·ªçn th√™m ·∫£nh.']//a"                      # Giao di·ªán m·ªõi
    ]

    for xpath in xpaths:
        try:
            btn = WebDriverWait(driver, 3).until(
                EC.element_to_be_clickable((By.XPATH, xpath))
            )
            print(f"‚úÖ T√¨m th·∫•y n√∫t theo XPath: {xpath}")
            return btn
        except:
            continue
    raise Exception("‚ùå Kh√¥ng t√¨m th·∫•y n√∫t 'Th√™m ·∫£nh' v·ªõi b·∫•t k·ª≥ XPath n√†o.")
def remove_emoji(text):
    emoji_pattern = re.compile(
        "[" u"\U00010000-\U0010FFFF"  # k√Ω t·ª± ngo√†i BMP
        "]+", flags=re.UNICODE)
    return emoji_pattern.sub(r'', text)

def find_to_driver(chrome_path, user_data_dir, profile_name):
    import subprocess
    import time
    from selenium import webdriver
    from selenium.webdriver.chrome.service import Service
    from selenium.webdriver.chrome.options import Options

    # Build l·ªánh
    chrome_cmd = [
        chrome_path,
        '--remote-debugging-port=9222',
        f'--user-data-dir={user_data_dir}',
        f'--profile-directory={profile_name}'
    ]

    print("üöÄ ƒêang ch·∫°y Chrome v·ªõi l·ªánh:")
    print(" ".join(chrome_cmd))

    proc = subprocess.Popen(chrome_cmd)
    time.sleep(3)

    if proc.poll() is not None:
        raise Exception("‚ùå Chrome kh√¥ng kh·ªüi ƒë·ªông ƒë∆∞·ª£c.")

    # K·∫øt n·ªëi selenium
    options = Options()
    options.add_experimental_option("debuggerAddress", "127.0.0.1:9222")

    driver = webdriver.Chrome(options=options)
    return driver
def find_to_meta_business_suite_page_image(driver, page_id, timeout=10):
        driver.get(f"https://business.facebook.com/latest/composer/?asset_id={page_id}&context_ref=HOME&nav_ref=internal_nav&ref=biz_web_home_create_post")
        print("ƒëaÃÉ tiÃÄm ƒë√™ÃÅn image")

def find_to_meta_business_suite_page_reels(driver, page_id, timeout=10):

        driver.get(f"https://business.facebook.com/latest/reels_composer?asset_id={page_id}&ref=biz_web_home_create_reel")
        print("ƒëaÃÉ tiÃÄm ƒë√™ÃÅn reels")
def create_reels(driver,video_path,small_image_path,title, description, address, add_message_mode, tags, schedule_date, hour, minute, share_to_newsfeed=True):
    screen_width, screen_height = pyautogui.size()

    # T√≠nh to√°n v·ªã tr√≠ ch√≠nh gi·ªØa m√†n h√¨nh
    center_x = screen_width // 2
    center_y = screen_height // 2

    # Click v√†o v·ªã tr√≠ ch√≠nh gi·ªØa
    pyautogui.click(center_x, center_y)
    # 2. Click n√∫t "Th√™m ·∫£nh"
    
    print("image_path in create_post", video_path)
  # T√¨m n√∫t 'Th√™m ·∫£nh/video' d·∫°ng div
    wait = WebDriverWait(driver, 10)
    element = wait.until(
        EC.element_to_be_clickable(
            (By.XPATH, "//div[contains(text(), 'Th√™m video')]")
        )
    )
    element.click()
    time.sleep(0.25)
    pyautogui.press('enter')

    time.sleep(2)
    
    pyperclip.copy(video_path)
    pyautogui.hotkey('ctrl', 'v')

    time.sleep(0.25)
    pyautogui.press('enter')
    focus_chrome_window()
    try:
        wait_upload = WebDriverWait(driver, 180)   # max 120 gi√¢y
        wait_upload.until(
            EC.presence_of_element_located(
                (By.XPATH, "//span[text()='100%']")
            )
        )
        print("Upload video xong 100%!")
    except Exception as e:
        print("Timeout ƒë·ª£i upload video 100%", e)
        return
    focus_chrome_window()
    wait = WebDriverWait(driver, 1)
    try:
        title_input = wait.until(
        EC.presence_of_element_located(
            (By.XPATH, "//input[@placeholder='Th√™m ti√™u ƒë·ªÅ cho th∆∞·ªõc phim']")
        )
        )
        driver.execute_script("arguments[0].click();", title_input)

        title_input.clear()
        title_input.send_keys(title)  # bi·∫øn title ch·ª©a n·ªôi dung b·∫°n mu·ªën nh·∫≠p
    except:
      print('An exception occurred')
    wait = WebDriverWait(driver, 1)
      
    try:
        desc_box = wait.until(
        EC.element_to_be_clickable((
            By.XPATH,
            "//div[@role='textbox' and @aria-label='H√£y vi·∫øt v√†o √¥ h·ªôp tho·∫°i ƒë·ªÉ th√™m vƒÉn b·∫£n v√†o b√†i vi·∫øt.']"
        ))
        )
        print("desc_box1",desc_box)
        time.sleep(0.5)
    except Exception as e:
        desc_box = wait.until(
        EC.element_to_be_clickable((
            By.XPATH,
            "//div[@role='textbox' and @aria-label='M√¥ t·∫£ th∆∞·ªõc phim c·ªßa b·∫°n ƒë·ªÉ m·ªçi ng∆∞·ªùi bi·∫øt n·ªôi dung th∆∞·ªõc phim']"
        ))
        )
        print("desc_box2",desc_box)
        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", desc_box)
        time.sleep(0.5)
    try:
        desc_box.click()
    except Exception as e:
        print("‚ö†Ô∏è Click b·ªã ch·∫∑n, d√πng JS ƒë·ªÉ click:", e)
        driver.execute_script("arguments[0].click();", desc_box)

    try:
        # Click m√¥ t·∫£
        try:
            desc_box.click()
        except Exception as e:
            print("‚ö†Ô∏è Click b·ªã ch·∫∑n, d√πng JS ƒë·ªÉ click:", e)
            driver.execute_script("arguments[0].click();", desc_box)

        time.sleep(0.2)
        print("desc_box3",desc_box)

        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", desc_box)
        time.sleep(0.3)
        print("desc_box duÃÄng auto",desc_box)
        # desc_box.send_keys(remove_non_bmp_characters(description))
        # time.sleep(0.5)
        box = desc_box
        box_location = box.location
        box_size = box.size

        box_center_x = box_location['x'] + box_size['width'] / 2
        box_center_y = box_location['y'] + box_size['height'] / 2

        # 5. L·∫•y v·ªã tr√≠ c·ª≠a s·ªï tr√¨nh duy·ªát
        window_position = driver.get_window_position()
        window_x = window_position['x']
        window_y = window_position['y']

        # ‚ö°Ô∏è Quan tr·ªçng: offset ~120-150px ƒë·ªÉ b√π tr·ª´ thanh address bar, header Chrome
        offset_y = 210  # N·∫øu c·∫ßn, b·∫°n c√≥ th·ªÉ tinh ch·ªânh

        # T√≠nh to√°n v·ªã tr√≠ th·ª±c t·∫ø
        absolute_x = window_x + box_center_x
        absolute_y = window_y + box_center_y + offset_y

        # 6. Click th·∫≠t s·ª± v√†o message box
        pyautogui.moveTo(absolute_x, absolute_y)
        pyautogui.click()
        time.sleep(0.25)
        # 4. G√µ n·ªôi dung b√†i vi·∫øt

        desc_box.click()
        time.sleep(0.25)

        # 7. Copy n·ªôi dung v√†o clipboard
        focus_chrome_window()
        pyperclip.copy(description)

        # 8. Paste v√†o
        pyautogui.hotkey('ctrl', 'v')
        time.sleep(1)
        pyautogui.click()
        time.sleep(0.25)


        print("‚úÖ ƒê√£ nh·∫≠p m√¥ t·∫£ reels.")
    except Exception as e:
        print("‚ùå Kh√¥ng th·ªÉ nh·∫≠p m√¥ t·∫£:", e)

    # Click n√∫t V·ªã tr√≠
    try:
        location_button = wait.until(
            EC.element_to_be_clickable((By.XPATH, "//div[@role='button' and @aria-label='V·ªã tr√≠']"))
        )
        location_button.click()
        print("‚úÖ ƒê√£ click n√∫t V·ªã tr√≠")
        is_location_button_clickable = True
    except Exception as e:
        print("‚ùå Kh√¥ng t√¨m th·∫•y ho·∫∑c click ƒë∆∞·ª£c n√∫t 'V·ªã tr√≠':", e)
        is_location_button_clickable = False
        
    if is_location_button_clickable:
            
        # Nh·∫≠p v·ªã tr√≠
        try:
            time.sleep(2)
            location_input = wait.until(
                EC.presence_of_element_located((By.XPATH, "//input[@placeholder='Nh·∫≠p v·ªã tr√≠']"))
            )
            location_input.click()
            location_input.send_keys(address)
            time.sleep(1)
            location_input.send_keys(Keys.ENTER)
            print("‚úÖ ƒê√£ nh·∫≠p v√† ch·ªçn ƒë·ªãa ƒëi·ªÉm:", address)
        except Exception as e:
            print("‚ùå Kh√¥ng th·ªÉ nh·∫≠p ƒë·ªãa ƒëi·ªÉm:", e)

        # Click n√∫t L∆∞u
        try:
            save_button = WebDriverWait(driver, 2).until(
                EC.element_to_be_clickable((By.XPATH, "//div[contains(text(), 'L∆∞u')]"))
            )
            driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", save_button)
            time.sleep(0.3)
            try:
                save_button.click()
            except Exception as e:
                print("‚ö†Ô∏è N√∫t L∆∞u b·ªã che, d√πng JS click:", e)
                driver.execute_script("arguments[0].click();", save_button)

            print("‚úÖ ƒê√£ click n√∫t L∆∞u")
        except Exception as e:
            print("‚ùå Kh√¥ng th·ªÉ click n√∫t 'L∆∞u':", e)

        # Thu h√∫t tin nh·∫Øn
        if add_message_mode:
            try:
                message_btn = WebDriverWait(driver, 2).until(
                    EC.element_to_be_clickable((By.XPATH, "//div[@role='button' and @aria-label='Thu h√∫t tin nh·∫Øn']"))
                )
                driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", message_btn)
                time.sleep(0.3)
                try:
                    message_btn.click()
                except Exception as e:
                    print("‚ö†Ô∏è Click th∆∞·ªùng b·ªã ch·∫∑n, d√πng JS:", e)
                    driver.execute_script("arguments[0].click();", message_btn)

                print("‚úÖ ƒê√£ click n√∫t Thu h√∫t tin nh·∫Øn")
            except Exception as e:
                print("‚ùå Kh√¥ng th·ªÉ b·∫≠t 'Thu h√∫t tin nh·∫Øn':", e)

    wait = WebDriverWait(driver, 10)
    upload_btn = wait.until(
        EC.element_to_be_clickable((
            By.XPATH,
            "//div[contains(text(), 'T·∫£i h√¨nh ·∫£nh l√™n')]"
        ))
    )
    driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", upload_btn)
    time.sleep(0.5)
    print("T√¨m th·∫•y n√∫t T·∫£i h√¨nh ·∫£nh l√™n (div).")
    upload_btn.click()
    print("ƒê√£ click n√∫t T·∫£i h√¨nh ·∫£nh l√™n (div).")

    # ƒê·ª£i th·∫ª <a> T·∫£i h√¨nh ·∫£nh l√™n xu·∫•t hi·ªán
    upload_link = wait.until(
        EC.element_to_be_clickable((
            By.XPATH,
            "//a[contains(text(), 'T·∫£i h√¨nh ·∫£nh l√™n')]"
        ))
    )
    driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", upload_link)
    time.sleep(0.5)
    try:
        upload_link.click()
    except Exception as e:
        print("‚ö†Ô∏è Click b·ªã ch·∫∑n, d√πng JS ƒë·ªÉ click:", e)
        driver.execute_script("arguments[0].click();", upload_link)
    print("ƒê√£ click link T·∫£i h√¨nh ·∫£nh l√™n (a).")

    # D√°n ƒë∆∞·ªùng d·∫´n ·∫£nh b·∫±ng pyautogui
    time.sleep(1)  # Ch·ªù h·ªôp ch·ªçn file hi·ªán ra
    pyperclip.copy(small_image_path)
    pyautogui.hotkey('ctrl', 'v')
    time.sleep(0.25)
    pyautogui.press('enter')
    print("ƒê√£ d√°n v√† ch·ªçn ·∫£nh.")
    try:
        tag_input = wait.until(
            EC.presence_of_element_located((
                By.XPATH,
                "//input[@placeholder='Th√™m t·ª´ kh√≥a li√™n quan ƒë·ªÉ m·ªçi ng∆∞·ªùi d·ªÖ t√¨m th·∫•y th∆∞·ªõc phim c·ªßa b·∫°n']"
            ))
        )

        # Scroll v√†o gi·ªØa m√†n h√¨nh
        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", tag_input)
        time.sleep(0.3)

        # D√πng JS ƒë·ªÉ click
        try:
            tag_input.click()
        except Exception as e:
            print("‚ö†Ô∏è Kh√¥ng th·ªÉ click tr·ª±c ti·∫øp, d√πng JS:", e)
            driver.execute_script("arguments[0].click();", tag_input)
    except:
      print('An exception occurred')
    try:
        # G·ª≠i t·ª´ng tag
        for tag in tags:
            tag_input.send_keys(tag)
            time.sleep(1)
            tag_input.send_keys(Keys.ENTER)
            print(f"‚úÖ ƒê√£ th√™m tag: {tag}")
            time.sleep(0.7)

    except Exception as e:
        print("‚ö†Ô∏è Kho√°ng th·ªÉ t√¨m th·∫•y n√∫t 'Ti·∫øp' ho·∫∑c kh√¥ng th·ªÉ click:", e)
    # Scroll v√† click an to√†n
    next_button = WebDriverWait(driver, 10).until(
    EC.element_to_be_clickable((By.XPATH, "//div[text()='Ti·∫øp']"))
    )
    driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", next_button)
    time.sleep(0.3)
    try:
        next_button.click()
    except Exception as e:
        print("‚ö†Ô∏è Click th∆∞·ªùng b·ªã ch·∫∑n, d√πng JS:", e)
        driver.execute_script("arguments[0].click();", next_button)
    try:
        try:
            next_button = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//div[text()='Ti·∫øp']"))
            )

            next_button.click()
        except Exception as e:
            print("‚ö†Ô∏è Click th∆∞·ªùng b·ªã ch·∫∑n, d√πng JS:", e)
            driver.execute_script("arguments[0].click();", next_button)
    except Exception as e:
        print("‚è≥ N√∫t 'C·∫Øt' kh√¥ng xu·∫•t hi·ªán sau khi b·∫•m 'Ti·∫øp' ho·∫∑c kh√¥ng th·ªÉ click:", e)
        # B·∫°n c√≥ th·ªÉ `return` ho·∫∑c ti·∫øp t·ª•c n·∫øu kh√¥ng c·∫ßn 'C·∫Øt'
    try:
        schedule_button = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//div[text()='L√™n l·ªãch']"))
        )
        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", schedule_button)
        time.sleep(0.3)
        schedule_button.click()
        print("‚úÖ ƒê√£ click n√∫t L√™n l·ªãch.")
    except Exception as e:
        print("‚ùå Kh√¥ng th·ªÉ click n√∫t L√™n l·ªãch:", e)
    
        # 6. Click v√†o khung ch·ª©a input ng√†y ƒë·ªÉ hi·ªÉn thiÃ£
    wait = WebDriverWait(driver, 10)
    
    # T√¨m input ng√†y theo placeholder (·ªïn ƒë·ªãnh h∆°n ID)
    date_input = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "input[placeholder='dd/mm/yyyy']")))
    driver.execute_script("arguments[0].click();", date_input)
    time.sleep(0.3)
    date_input.send_keys(Keys.CONTROL, 'a')
    date_input.send_keys(schedule_date)
    date_input.send_keys(Keys.ENTER)
    time.sleep(0.5)

    hour_input = driver.find_element(By.CSS_SELECTOR, 'input[aria-label="gi·ªù"]')
    driver.execute_script("arguments[0].click();", hour_input)
    time.sleep(0.3)
    hour_input.send_keys(Keys.CONTROL, 'a')
    hour_input.send_keys(hour)

    # T√¨m input ph√∫t
    minute_input = driver.find_element(By.CSS_SELECTOR, 'input[aria-label="ph√∫t"]')
    driver.execute_script("arguments[0].click();", minute_input)
    time.sleep(0.3)
    minute_input.send_keys(Keys.CONTROL, 'a')
    minute_input.send_keys(minute)
    if share_to_newsfeed:
        try:
            share_switch = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.XPATH, "//input[@type='checkbox' and @aria-label='Chia s·∫ª l√™n tin c·ªßa b·∫°n']"))
            )
            
            # Scroll to element (ƒë·∫£m b·∫£o kh√¥ng b·ªã che)
            driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", share_switch)
            time.sleep(0.3)

            # N·∫øu ch∆∞a b·∫≠t th√¨ click
            if not share_switch.is_selected():
                share_switch.click()
                time.sleep(5)
                print("‚úÖ ƒê√£ b·∫≠t t√πy ch·ªçn 'Chia s·∫ª l√™n tin c·ªßa b·∫°n'")
            else:
                print("‚ÑπÔ∏è T√πy ch·ªçn ƒë√£ ƒë∆∞·ª£c b·∫≠t tr∆∞·ªõc ƒë√≥.")

        except Exception as e:
            print("‚ùå Kh√¥ng th·ªÉ b·∫≠t radio 'Chia s·∫ª l√™n tin c·ªßa b·∫°n':", e)
    

    # schedule_btn = WebDriverWait(driver, 15).until(
    #     EC.presence_of_element_located((
    #         By.XPATH,
    #         "//div[@role='button' and .//div[text()='L√™n l·ªãch']]"
    #     ))
    # )
    schedule_btn = WebDriverWait(driver, 15).until(
        EC.element_to_be_clickable((
            By.XPATH,
            "/html/body/div[1]/div/div[1]/div/div[2]/div/div/div[1]/span/div/div/div[1]/div[1]/div/div[2]/div/div/div/div/div/div/div/div/div/div[2]/div/div[1]/div/div/div[2]/div/div/div/div[2]/div/div/div[2]/div/div/span/div/div/div"
        ))
    )

    # Scroll r·ªìi click
    driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", schedule_btn)
    schedule_btn.click()
    print("‚úÖ ƒê√£ click ƒë√∫ng n√∫t 'L√™n l·ªãch'.")

def create_post(driver, message, image_path, schedule_date="15/06/2025", hour="15", minute="45"):
    # 2. Click n√∫t "Th√™m ·∫£nh"
    
    print("jsadjadjsa")
    screen_width, screen_height = pyautogui.size()

    # T√≠nh to√°n v·ªã tr√≠ ch√≠nh gi·ªØa m√†n h√¨nh
    center_x = screen_width // 2
    center_y = screen_height // 2

    # Click v√†o v·ªã tr√≠ ch√≠nh gi·ªØa
    pyautogui.click(center_x, center_y)
    # 2. Click n√∫t "Th√™m ·∫£nh"
    
    print("image_path in create_post", image_path)
  # T√¨m n√∫t 'Th√™m ·∫£nh/video' d·∫°ng div

    try:
        add_image_btn = WebDriverWait(driver, 3).until(
                EC.element_to_be_clickable((
                    By.XPATH,
                    "//div[@role='button' and .//div[text()='Th√™m ·∫£nh/video']]"
                ))
            )
        try:
            add_image_btn.click()
            time.sleep(1)
        except Exception as e:
            print("‚ùå Kh√¥ng click ƒë∆∞·ª£c n√∫t 'Th√™m ·∫£nh/video' (d·∫°ng div):", e)
    except:
        try:
            add_image_btn = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((
                    By.XPATH,
                    "//div[@aria-label='Ch·ªçn th√™m ·∫£nh.']//a[.//div[normalize-space()='Th√™m ·∫£nh']]"
                ))
            )
            print("TiÃÄm l√¢ÃÄn 2", add_image_btn)

            # N·∫øu n√∫t 'Th√™m ·∫£nh' ƒë√£ s·∫µn s√†ng
            driver.execute_script("arguments[0].scrollIntoView(true);", add_image_btn)

            try:
                add_image_btn.click()  # Th·ª≠ click
            except Exception:
                driver.execute_script("arguments[0].click();", add_image_btn)  # D√πng JS click n·∫øu kh√¥ng th√†nh c√¥ng

            time.sleep(1)

        except Exception as e:
            print("‚ùå Kh√¥ng click ƒë∆∞·ª£c n√∫t 'Th√™m ·∫£nh' (d·∫°ng a):", e)

    pyperclip.copy(image_path)
    pyautogui.hotkey('ctrl', 'v')

    time.sleep(0.25)
    pyautogui.press('enter')
    focus_chrome_window()


    time.sleep(4)
    message_box = driver.find_element(By.XPATH,
    "//div[@contenteditable='true' and contains(@aria-label,'th√™m vƒÉn b·∫£n v√†o b√†i vi·∫øt')]")
    box = message_box
    box_location = box.location
    box_size = box.size

    box_center_x = box_location['x'] + box_size['width'] / 2
    box_center_y = box_location['y'] + box_size['height'] / 2

    # 5. L·∫•y v·ªã tr√≠ c·ª≠a s·ªï tr√¨nh duy·ªát
    window_position = driver.get_window_position()
    window_x = window_position['x']
    window_y = window_position['y']

    # ‚ö°Ô∏è Quan tr·ªçng: offset ~120-150px ƒë·ªÉ b√π tr·ª´ thanh address bar, header Chrome
    offset_y = 210  # N·∫øu c·∫ßn, b·∫°n c√≥ th·ªÉ tinh ch·ªânh

    # T√≠nh to√°n v·ªã tr√≠ th·ª±c t·∫ø
    absolute_x = window_x + box_center_x
    absolute_y = window_y + box_center_y + offset_y

    # 6. Click th·∫≠t s·ª± v√†o message box
    pyautogui.moveTo(absolute_x, absolute_y)
    pyautogui.click()
    time.sleep(0.25)
    # 4. G√µ n·ªôi dung b√†i vi·∫øt

    message_box.click()
    time.sleep(0.25)

    # 7. Copy n·ªôi dung v√†o clipboard
    focus_chrome_window()
    pyperclip.copy(message)

    # 8. Paste v√†o
    pyautogui.hotkey('ctrl', 'v')
    time.sleep(1)
    pyautogui.click()
    time.sleep(0.25)
    checkbox_schedule = driver.find_element(By.CSS_SELECTOR, 'input[aria-label="ƒê·∫∑t ng√†y v√† gi·ªù"]')
    checkbox_schedule.click()
    time.sleep(2)  # ‚ö†Ô∏è th√™m d√≤ng n√†y

    # 6. Click v√†o khung ch·ª©a input ng√†y ƒë·ªÉ hi·ªÉn thiÃ£
    wait = WebDriverWait(driver, 10)
    
    # T√¨m input ng√†y theo placeholder (·ªïn ƒë·ªãnh h∆°n ID)
    date_input = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "input[placeholder='dd/mm/yyyy']")))
    driver.execute_script("arguments[0].click();", date_input)
    time.sleep(0.3)
    date_input.send_keys(Keys.CONTROL, 'a')
    date_input.send_keys(schedule_date)
    date_input.send_keys(Keys.ENTER)
    time.sleep(0.5)

    hour_input = driver.find_element(By.CSS_SELECTOR, 'input[aria-label="gi·ªù"]')
    driver.execute_script("arguments[0].click();", hour_input)
    time.sleep(0.3)
    hour_input.send_keys(Keys.CONTROL, 'a')
    hour_input.send_keys(hour)

    # T√¨m input ph√∫t
    minute_input = driver.find_element(By.CSS_SELECTOR, 'input[aria-label="ph√∫t"]')
    driver.execute_script("arguments[0].click();", minute_input)
    time.sleep(0.3)
    minute_input.send_keys(Keys.CONTROL, 'a')
    minute_input.send_keys(minute)

    # 9. Click n√∫t "L√™n l·ªãch"
    schedule_button = driver.find_element(By.XPATH, "//div[@role='button' and .//div[text()='L√™n l·ªãch']]")
    driver.execute_script("arguments[0].click();", schedule_button)
    time.sleep(2)

